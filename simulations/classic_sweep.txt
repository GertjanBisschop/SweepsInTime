//classic sweep - Drafted by GB

initialize() {
	
	initializeMutationRate(0.0);
	//homozygous selection coefficient is 0.1, heterozygous 0.05, so 2Ne*s = 1000
	initializeMutationType("m1", 0.5, "f", 0.1);
	initializeMutationType('m2', 0.5, 'f', 0.0);
	initializeGenomicElementType('g2', m2, 1.0);
	initializeGenomicElement(g2,0,1000000);  
	initializeRecombinationRate(1e-7);

	initializeTreeSeq(simplificationRatio=NULL, simplificationInterval=250);
	//setwd('');
}

1 {
	defineConstant("simID", getSeed());
	defineConstant("Ne", 10000);
	save_time = c(0.1,0.25,0.5,1,1.5)*2*Ne;
	sim.setValue('save_time', save_time);
	//sweep_dur = 2*log(1000)/1000 * 20000;
	//defineConstant('sweep_duration', sweep_dur);
	sim.addSubpop('p0', 10000);

}

1000 late() {
	target = sample(p0.genomes, 1);
	target.addNewDrawnMutation(m1, 500000); 
	sim.treeSeqOutput("/tmp/slim_" + simID + ".trees");
	sim.setValue('not_fixed', T);
}

1000:100000 late() {
	
	if (sim.getValue('not_fixed')){
		if (sim.countOfMutationsOfType(m1) == 0){

			fixed = (sum(sim.substitutions.mutationType == m1) == 1);
	 
			if (fixed){
				//save generation in which fixed
				sim.setValue('gen', sim.substitutions.fixationGeneration);
				sim.setValue('not_fixed', F);
				sample = sample(p0.individuals, size=10);
				sim.treeSeqRememberIndividuals(sample);
				}
			
			else{
				// start a newly seeded run
				sim.readFromPopulationFile("/tmp/slim_" + simID + ".trees");
				setSeed(rdunif(1, 0, asInteger(2^32) - 1));

				} 
			}
		}

	else{
		if (any(sim.getValue('save_time')==(sim.generation-sim.getValue('gen')))){
				//sample 10 individuals, save them in treesequence
				sample = sample(p0.individuals, size=10);
				sim.treeSeqRememberIndividuals(sample);
				} 
		if ((sim.generation-sim.getValue('gen'))>=(2*2*Ne)){
				sim.treeSeqOutput('slim_'+simID+'_FIXED.trees');
				sim.simulationFinished();
				}	
			}	
}

100000 { sim.simulationFinished(); }